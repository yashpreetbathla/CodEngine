{"version":3,"sources":["login/Codengine-cropped.png","contest/Codengine_white-cropped.png","search/Codengine_white-cropped.png","editor/Codengine_white-cropped.png","login/LUNCHTIME.jpg","config.js","login/Login.js","contest/Contest.js","search/FinalSearch.js","editor/CodeEditor.js","Codechef.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","window","location","href","URL","className","rel","src","style","float","CodEngine","alt","type","onClick","this","handleClick","Component","Contest","v","pathname","res","substring","length","state","val","problems","done","prob","name","code","st","en","banner","announcements","problemlist","rankings","submissions","ended","usrfetched","userdetails","notStarted","setState","getContest","response","localStorage","getItem","fetch","headers","Authorization","method","then","json","result","parsedjson","JSON","parse","stringify","check_parent","reso","data","content","bannner","moment","diff","map","problemCode","lst","x","a","pcode","ssub","acc","push","self","setInterval","tt","d","duration","days","h","hours","m","minutes","s","seconds","prank","pusername","score","catch","err","console","error","problemcode","language","i","resp","userid","username","fullusrname","fullname","rating","ratings","allContest","band","chld","str","tk","access_token","rtk","refresh_token","setItem","class","textAlign","fontSize","borderTop","margin","id","Fragment","backgroundColor","boxShadow","border","key","to","toPrecision","withRouter","FinalSearch","idMap","items","CC","onTextChanged","e","value","target","suggestions","regex","RegExp","sort","filter","test","text","yoyo","split","Accept","getCode","getName","getNameCode","concat","mapping","startDate","endDate","log","FC","item","suggestionSelected","values","queryString","search","Code","onChange","placeholder","required","renderSuggestions","setText","CodeEditor","code4","newValue","codd","handleCustomTC","customTC","submit","sub","running","handleChange1","lang","handleChange2","theme","myFunction","bl","clicked","bind","output","stat","statement","getProblems","parsedjson1","pname","sizelt","timelt","auth","sucsub","totsub","lag","nextProps","nextState","payload","sourceCode","input","FormData","append","body","link","setopts","status","date","op","mem","memory","setTimeout","textJustify","Parser","borderRadius","width","mode","editorProps","$blockScrolling","color","padding","fontWeight","Codechef","path","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4bafa72b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Codengine-cropped.9e2ece70.png\";","module.exports = __webpack_public_path__ + \"static/media/Codengine_white-cropped.a337fb5e.png\";","module.exports = __webpack_public_path__ + \"static/media/Codengine_white-cropped.a337fb5e.png\";","module.exports = __webpack_public_path__ + \"static/media/Codengine_white-cropped.a337fb5e.png\";","module.exports = __webpack_public_path__ + \"static/media/LUNCHTIME.0b53ac9a.jpg\";","let url = 'https://codengineserver.000webhostapp.com/';\r\n// let url ='https://code-engine-server.herokuapp.com/';\r\nlet url_host= 'http://localhost:3000/';\r\n\r\nexport default {url,url_host};","import React, { Component } from \"react\";\r\nimport \"./Login.css\";\r\nimport LUNCHTIME from \"./LUNCHTIME.jpg\";\r\nimport CodEngine from \"./Codengine-cropped.png\";\r\nimport * as URL from '../config.js';\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  handleClick() {\r\n    // console.log(URL.default.url);\r\n    window.location.href = URL.default.url;\r\n    // window.location.href = \"https://api.codechef.com/oauth/authorize?response_type=code&client_id=abc6c2ddbf6d18ee86fc3c25f5673bb1&state=xyz&redirect_uri=https://codengine.tech/search\";\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"loginbackground\">\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\r\n        />\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"\r\n        />\r\n        <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script>\r\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <div className=\"login-form\" style={{ float: \"center\" }}>\r\n          \r\n          <div style={{}}>\r\n            <img className=\"logoimage\" src={CodEngine} alt=\"logo\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            {/* <form  > */}\r\n            <div className=\"log\">\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary\"\r\n                onClick={this.handleClick}\r\n              >\r\n                Sign in\r\n              </button>\r\n            </div>\r\n            {/* </form> */}\r\n            {/* <button type=\"submit\" className=\"btn btn-primary btn-lg btn-block\" onclick=\"https://api.codechef.com/oauth/authorize?response_type=code&client_id=abc6c2ddbf6d18ee86fc3c25f5673bb1&state=xyz&redirect_uri=http://localhost:3000/\">Sign in</button> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\n// import {withRouter,useParams} from 'react-router-dom';\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport queryString from \"query-string\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Contest.css\";\r\nimport CodEngine from \"./Codengine_white-cropped.png\";\r\nimport * as URL from '../config.js';\r\nimport moment from \"moment\";\r\n\r\n\r\nclass Contest extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // console.log(this);\r\n    // console.log(\"HII\");\r\n    var v = window.location.pathname;\r\n    // alert(v);\r\n    var res = v.substring(9, v.length);\r\n    this.state = {\r\n      val: res,\r\n      problems: [],\r\n      done: false,\r\n      prob: [],\r\n      name: \"\",\r\n      code: \"\",\r\n      st: \"\",\r\n      en: \"\",\r\n      banner: \"\",\r\n      announcements: \"\",\r\n      problemlist: [],\r\n      rankings: [],\r\n      submissions: [],\r\n      ended: \"\",\r\n      usrfetched: false,\r\n      userdetails: {},\r\n      notStarted: false,\r\n    };\r\n    this.setState({});\r\n    // var v = localStorage.getItem('aut_token');\r\n\r\n    // let response;\r\n    this.getContest();\r\n  }\r\n\r\n  getContest() {\r\n    while (localStorage.getItem(\"aut_token\") === null) {\r\n      // console.log(\"token get\");\r\n    }\r\n    let response;\r\n    fetch(\r\n      \"https://api.codechef.com/contests/\" +\r\n        this.state.val +\r\n        \"?fields=&sortBy=&sortOrder=\",\r\n      {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n        },\r\n        method: \"GET\",\r\n      }\r\n    )\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        response = res.result;\r\n        var parsedjson = JSON.parse(JSON.stringify(response));\r\n        // alert(parsedjson);\r\n        // console.log(parsedjson);\r\n        var check_parent = parsedjson[\"data\"][\"content\"][\"isParent\"];\r\n        var reso = response.data.content;\r\n        this.setState({\r\n          bannner : reso[\"bannerFile\"],\r\n          st: moment(reso[\"startDate\"]).diff(moment()),\r\n          en: reso[\"endDate\"],\r\n        });\r\n\r\n        if (check_parent === false) {\r\n          var getCode = parsedjson[\"data\"][\"content\"][\"problemsList\"].map(\r\n            (val) => val.problemCode\r\n          );\r\n          // console.log(\"HEY\");\r\n          // console.log(getCode);\r\n          response = response.data.content;\r\n          // var temp= this.state.problems;\r\n          var lst = [];\r\n          for (let x of parsedjson[\"data\"][\"content\"][\"problemsList\"]) {\r\n            //   let resp;\r\n            let a = {\r\n              pcode: x[\"problemCode\"],\r\n              ssub: x[\"successfulSubmissions\"],\r\n              acc: x[\"accuracy\"],\r\n            };\r\n\r\n            lst.push(a);\r\n          }\r\n\r\n          this.setState({\r\n            name: response[\"name\"],\r\n            code: response[\"code\"],\r\n            st: response[\"startDate\"],\r\n            en: response[\"endDate\"],\r\n            banner: response[\"bannerFile\"],\r\n            announcements: response[\"announcements\"],\r\n            problemlist: lst,\r\n            done: true,\r\n          });\r\n          var self = this;\r\n          setInterval(() => {\r\n            var tt = moment(self.state.en).diff(moment());\r\n            var st = moment(self.state.st).diff(moment());\r\n\r\n            if (tt <= 0 && st <= 0) {\r\n              // console.log('st'+st);\r\n              self.setState({ ended: \"ended\" });\r\n            } else if (tt >= 0 && st <= 0) {\r\n              self.setState({ ended: \"run\" });\r\n              self.setState({\r\n                d: moment.duration(moment(self.state.st).diff(moment())).days(),\r\n                h: moment\r\n                  .duration(moment(self.state.en).diff(moment()))\r\n                  .hours(),\r\n                m: moment\r\n                  .duration(moment(self.state.en).diff(moment()))\r\n                  .minutes(),\r\n                s: moment\r\n                  .duration(moment(self.state.en).diff(moment()))\r\n                  .seconds(),\r\n              });\r\n            } else if (st > 0) {\r\n              self.setState({ ended: \"begin\" });\r\n              self.setState({\r\n                d: moment.duration(moment(self.state.st).diff(moment())).days(),\r\n                h: moment\r\n                  .duration(moment(self.state.st).diff(moment()))\r\n                  .hours(),\r\n                m: moment\r\n                  .duration(moment(self.state.st).diff(moment()))\r\n                  .minutes(),\r\n                s: moment\r\n                  .duration(moment(self.state.st).diff(moment()))\r\n                  .seconds(),\r\n              });\r\n            }\r\n            // console.log(moment(self.state.en).diff(moment()))\r\n            //-ve past data\r\n            // console.log(moment(self.state.st).diff(moment()))\r\n          }, 1000);\r\n          // console.log(temp);\r\n\r\n          // console.log(this.state.problems);\r\n\r\n          //RANKINGS\r\n\r\n          fetch(\r\n            \"https://api.codechef.com/rankings/\" +\r\n              this.state.val +\r\n              \"?fields=&country=&institution=&institutionType=&offset=&limit=&sortBy=&sortOrder=\",\r\n            {\r\n              headers: {\r\n                Authorization: \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n              },\r\n              method: \"GET\",\r\n            }\r\n          )\r\n            .then((res) => {\r\n              return res.json();\r\n            })\r\n            .then((res) => {\r\n              // console.log(res);\r\n              response = res.result;\r\n              var parsedjson = JSON.parse(JSON.stringify(response));\r\n              // alert(parsedjson);\r\n              // console.log(\"HEYEGYGEYGBCY\");\r\n              // console.log(parsedjson);\r\n\r\n              var lst = [];\r\n              for (let x of parsedjson[\"data\"][\"content\"]) {\r\n                //   let resp;\r\n                let a = {\r\n                  prank: x[\"rank\"],\r\n                  pusername: x[\"username\"],\r\n                  score: x[\"totalScore\"],\r\n                };\r\n\r\n                lst.push(a);\r\n              }\r\n\r\n              this.setState({\r\n                rankings: lst,\r\n                done: true,\r\n              });\r\n            })\r\n            .catch((err) => {\r\n              console.error(err);\r\n            });\r\n          //Submissions\r\n\r\n          fetch(\r\n            \"https://api.codechef.com/submissions/?result=&year=&username=&language=&problemCode=&contestCode=\" +\r\n              this.state.val +\r\n              \"&fields=\",\r\n            {\r\n              headers: {\r\n                Authorization: \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n              },\r\n              method: \"GET\",\r\n            }\r\n          )\r\n            .then((res) => {\r\n              return res.json();\r\n            })\r\n            .then((res) => {\r\n              // console.log(res);\r\n              response = res.result;\r\n              var parsedjson = JSON.parse(JSON.stringify(response));\r\n\r\n              // console.log(\"submissions\");\r\n              // console.log(parsedjson);\r\n\r\n              var lst = [];\r\n              for (let x of parsedjson[\"data\"][\"content\"]) {\r\n                //   let resp;\r\n                let a = {\r\n                  problemcode: x[\"problemCode\"],\r\n                  pusername: x[\"username\"],\r\n                  result: x[\"result\"],\r\n                  language: x[\"language\"],\r\n                };\r\n\r\n                lst.push(a);\r\n              }\r\n\r\n              this.setState({\r\n                submissions: lst,\r\n                done: true,\r\n              });\r\n            })\r\n            .catch((err) => {\r\n              console.error(err);\r\n            });\r\n        } else {\r\n          fetch(\"https://api.codechef.com/users/me\", {\r\n            headers: {\r\n              Authorization: \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n            },\r\n            method: \"GET\",\r\n          })\r\n            .then((res) => {\r\n              return res.json();\r\n            })\r\n            .then((res) => {\r\n              // console.log(\"RESPONSe\");\r\n              // console.log(res);\r\n              response = res.result;\r\n\r\n              var pj = JSON.parse(JSON.stringify(response));\r\n\r\n              var i;\r\n              var resp = pj[\"data\"][\"content\"];\r\n\r\n              var a = {\r\n                userid: resp.username,\r\n                fullusrname: resp.fullname,\r\n                rating: resp.ratings.allContest,\r\n                band: resp.band,\r\n              };\r\n              if (resp.ratings.allContest >= 1800) {\r\n                i = 0;\r\n              } else {\r\n                i = 1;\r\n              }\r\n              // console.log(\"THIS IS PARSED JSON \");\r\n              // console.log(parsedjson[\"data\"][\"content\"][\"children\"][i]);\r\n              var chld = parsedjson[\"data\"][\"content\"][\"children\"][i];\r\n              var respo = response.data.content;\r\n\r\n              var self = this;\r\n\r\n              var tt = moment(self.state.en).diff(moment());\r\n              var st = moment(self.state.st).diff(moment());\r\n\r\n              if (tt <= 0 && st <= 0) {\r\n                //  console.log('st'+st);\r\n                self.setState({ ended: \"ended\" });\r\n              } else if (tt >= 0 && st <= 0) {\r\n                self.setState({ ended: \"run\" });\r\n                self.setState({\r\n                  d: moment\r\n                    .duration(moment(self.state.st).diff(moment()))\r\n                    .days(),\r\n                  h: moment\r\n                    .duration(moment(self.state.en).diff(moment()))\r\n                    .hours(),\r\n                  m: moment\r\n                    .duration(moment(self.state.en).diff(moment()))\r\n                    .minutes(),\r\n                  s: moment\r\n                    .duration(moment(self.state.en).diff(moment()))\r\n                    .seconds(),\r\n                });\r\n              } else if (st > 0) {\r\n                self.setState({ ended: \"begin\", notStarted: true });\r\n                self.setState({\r\n                  d: moment\r\n                    .duration(moment(self.state.st).diff(moment()))\r\n                    .days(),\r\n                  h: moment\r\n                    .duration(moment(self.state.st).diff(moment()))\r\n                    .hours(),\r\n                  m: moment\r\n                    .duration(moment(self.state.st).diff(moment()))\r\n                    .minutes(),\r\n                  s: moment\r\n                    .duration(moment(self.state.st).diff(moment()))\r\n                    .seconds(),\r\n                });\r\n                var str = this.state.val;\r\n                // console.log(str);\r\n                str = str.substring(0, str.length - 1);\r\n                // console.log(str);\r\n                chld = str;\r\n                // console.log(\"CHILD\" + chld);\r\n                this.setState({ val: str, notStarted: false });\r\n                // console.log(moment(self.state.en).diff(moment()))\r\n              }\r\n              this.setState({ userdetails: a, usrfetched: true, val: chld });\r\n              // console.log(this.state.val);\r\n              // console.log(\"ST\" + this.state.st);\r\n              ///////////////////IFFF ST > 0\r\n              if (this.state.st > 0) {\r\n                fetch(\r\n                  \"https://api.codechef.com/contests/\" +\r\n                    this.state.val.substring(0, this.state.val.length - 1) +\r\n                    \"?fields=&sortBy=&sortOrder=\",\r\n                  {\r\n                    headers: {\r\n                      Authorization:\r\n                        \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n                    },\r\n                    method: \"GET\",\r\n                  }\r\n                )\r\n                  .then((res) => {\r\n                    return res.json();\r\n                  })\r\n                  .then((res) => {\r\n                    // console.log(res);\r\n                    response = res.result;\r\n                    var parsedjson = JSON.parse(JSON.stringify(response));\r\n                    // alert(parsedjson);\r\n                    // console.log(parsedjson);\r\n                    var getCode = parsedjson[\"data\"][\"content\"][\r\n                      \"problemsList\"\r\n                    ].map((val) => val.problemCode);\r\n                    // console.log(\"HEY\");\r\n                    // console.log(getCode);\r\n                    response = response.data.content;\r\n                    // var temp= this.state.problems;\r\n                    var lst = [];\r\n                    for (let x of parsedjson[\"data\"][\"content\"][\r\n                      \"problemsList\"\r\n                    ]) {\r\n                      //   let resp;\r\n                      let a = {\r\n                        pcode: x[\"problemCode\"],\r\n                        ssub: x[\"successfulSubmissions\"],\r\n                        acc: x[\"accuracy\"],\r\n                      };\r\n\r\n                      lst.push(a);\r\n                    }\r\n\r\n                    this.setState({\r\n                      name: response[\"name\"],\r\n                      code: response[\"code\"],\r\n                      st: response[\"startDate\"],\r\n                      en: response[\"endDate\"],\r\n                      banner: response[\"bannerFile\"],\r\n                      announcements: response[\"announcements\"],\r\n                      problemlist: lst,\r\n                      done: true,\r\n                    });\r\n                    var self = this;\r\n                    setInterval(() => {\r\n                      var tt = moment(self.state.en).diff(moment());\r\n                      var st = moment(self.state.st).diff(moment());\r\n\r\n                      if (tt <= 0 && st <= 0) {\r\n                        // console.log(\"st\" + st);\r\n                        self.setState({ ended: \"ended\" });\r\n                      } else if (tt >= 0 && st <= 0) {\r\n                        self.setState({ ended: \"run\" });\r\n                        self.setState({\r\n                          d: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .days(),\r\n                          h: moment\r\n                            .duration(moment(self.state.en).diff(moment()))\r\n                            .hours(),\r\n                          m: moment\r\n                            .duration(moment(self.state.en).diff(moment()))\r\n                            .minutes(),\r\n                          s: moment\r\n                            .duration(moment(self.state.en).diff(moment()))\r\n                            .seconds(),\r\n                        });\r\n                      } else if (st > 0) {\r\n                        self.setState({ ended: \"begin\", notStarted: true });\r\n                        self.setState({\r\n                          d: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .days(),\r\n                          h: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .hours(),\r\n                          m: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .minutes(),\r\n                          s: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .seconds(),\r\n                        });\r\n                      }\r\n                      // console.log(moment(self.state.en).diff(moment()))\r\n                      //-ve past data\r\n                      // console.log(moment(self.state.st).diff(moment()))\r\n                    }, 1000);\r\n                    // console.log(temp);\r\n\r\n                    // console.log(this.state.problems);\r\n                  })\r\n                  .catch((err) => {\r\n                    console.error(err);\r\n                  });\r\n\r\n                //RANKINGS\r\n                fetch(\r\n                  \"https://api.codechef.com/rankings/\" +\r\n                    this.state.val.substring(0, this.state.val.length - 1) +\r\n                    \"?fields=&country=&institution=&institutionType=&offset=&limit=&sortBy=&sortOrder=\",\r\n                  {\r\n                    headers: {\r\n                      Authorization:\r\n                        \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n                    },\r\n                    method: \"GET\",\r\n                  }\r\n                )\r\n                  .then((res) => {\r\n                    return res.json();\r\n                  })\r\n                  .then((res) => {\r\n                    // console.log(res);\r\n                    response = res.result;\r\n                    var parsedjson = JSON.parse(JSON.stringify(response));\r\n                    // alert(parsedjson);\r\n                    // console.log(\"HEYEGYGEYGBCY\");\r\n                    // console.log(parsedjson);\r\n\r\n                    var lst = [];\r\n                    for (let x of parsedjson[\"data\"][\"content\"]) {\r\n                      //   let resp;\r\n                      let a = {\r\n                        prank: x[\"rank\"],\r\n                        pusername: x[\"username\"],\r\n                        score: x[\"totalScore\"],\r\n                      };\r\n\r\n                      lst.push(a);\r\n                    }\r\n\r\n                    this.setState({\r\n                      rankings: lst,\r\n                      done: true,\r\n                    });\r\n                  })\r\n                  .catch((err) => {\r\n                    console.error(err);\r\n                  });\r\n                //Submissions\r\n\r\n                fetch(\r\n                  \"https://api.codechef.com/submissions/?result=&year=&username=&language=&problemCode=&contestCode=\" +\r\n                    this.state.val.substring(0, this.state.val.length - 1) +\r\n                    \"&fields=\",\r\n                  {\r\n                    headers: {\r\n                      Authorization:\r\n                        \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n                    },\r\n                    method: \"GET\",\r\n                  }\r\n                )\r\n                  .then((res) => {\r\n                    return res.json();\r\n                  })\r\n                  .then((res) => {\r\n                    // console.log(res);\r\n                    response = res.result;\r\n                    var parsedjson = JSON.parse(JSON.stringify(response));\r\n\r\n                    // console.log(\"submissions\");\r\n                    // console.log(parsedjson);\r\n\r\n                    var lst = [];\r\n                    for (let x of parsedjson[\"data\"][\"content\"]) {\r\n                      //   let resp;\r\n                      let a = {\r\n                        problemcode: x[\"problemCode\"],\r\n                        pusername: x[\"username\"],\r\n                        result: x[\"result\"],\r\n                        language: x[\"language\"],\r\n                      };\r\n\r\n                      lst.push(a);\r\n                    }\r\n\r\n                    this.setState({\r\n                      submissions: lst,\r\n                      done: true,\r\n                    });\r\n                  })\r\n                  .catch((err) => {\r\n                    console.error(err);\r\n                  });\r\n              } else {\r\n                ///////////////////////////////////////////////////ELSE FOR ST < 0\r\n                fetch(\r\n                  \"https://api.codechef.com/contests/\" +\r\n                    this.state.val +\r\n                    \"?fields=&sortBy=&sortOrder=\",\r\n                  {\r\n                    headers: {\r\n                      Authorization:\r\n                        \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n                    },\r\n                    method: \"GET\",\r\n                  }\r\n                )\r\n                  .then((res) => {\r\n                    return res.json();\r\n                  })\r\n                  .then((res) => {\r\n                    // console.log(res);\r\n                    response = res.result;\r\n                    var parsedjson = JSON.parse(JSON.stringify(response));\r\n                    // alert(parsedjson);\r\n                    // console.log(parsedjson);\r\n                    var getCode = parsedjson[\"data\"][\"content\"][\r\n                      \"problemsList\"\r\n                    ].map((val) => val.problemCode);\r\n                    // console.log(\"HEY\");\r\n                    // console.log(getCode);\r\n                    response = response.data.content;\r\n                    // var temp= this.state.problems;\r\n                    var lst = [];\r\n                    for (let x of parsedjson[\"data\"][\"content\"][\r\n                      \"problemsList\"\r\n                    ]) {\r\n                      //   let resp;\r\n                      let a = {\r\n                        pcode: x[\"problemCode\"],\r\n                        ssub: x[\"successfulSubmissions\"],\r\n                        acc: x[\"accuracy\"],\r\n                      };\r\n\r\n                      lst.push(a);\r\n                    }\r\n\r\n                    this.setState({\r\n                      name: response[\"name\"],\r\n                      code: response[\"code\"],\r\n                      st: response[\"startDate\"],\r\n                      en: response[\"endDate\"],\r\n                      banner: response[\"bannerFile\"],\r\n                      announcements: response[\"announcements\"],\r\n                      problemlist: lst,\r\n                      done: true,\r\n                    });\r\n                    var self = this;\r\n                    setInterval(() => {\r\n                      var tt = moment(self.state.en).diff(moment());\r\n                      var st = moment(self.state.st).diff(moment());\r\n\r\n                      if (tt <= 0 && st <= 0) {\r\n                        // console.log(\"st\" + st);\r\n                        self.setState({ ended: \"ended\" });\r\n                      } else if (tt >= 0 && st <= 0) {\r\n                        self.setState({ ended: \"run\" });\r\n                        self.setState({\r\n                          d: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .days(),\r\n                          h: moment\r\n                            .duration(moment(self.state.en).diff(moment()))\r\n                            .hours(),\r\n                          m: moment\r\n                            .duration(moment(self.state.en).diff(moment()))\r\n                            .minutes(),\r\n                          s: moment\r\n                            .duration(moment(self.state.en).diff(moment()))\r\n                            .seconds(),\r\n                        });\r\n                      } else if (st > 0) {\r\n                        self.setState({ ended: \"begin\", notStarted: true });\r\n                        self.setState({\r\n                          d: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .days(),\r\n                          h: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .hours(),\r\n                          m: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .minutes(),\r\n                          s: moment\r\n                            .duration(moment(self.state.st).diff(moment()))\r\n                            .seconds(),\r\n                        });\r\n                      }\r\n                      // console.log(moment(self.state.en).diff(moment()))\r\n                      //-ve past data\r\n                      // console.log(moment(self.state.st).diff(moment()))\r\n                    }, 1000);\r\n                    // console.log(temp);\r\n\r\n                    // console.log(this.state.problems);\r\n                  })\r\n                  .catch((err) => {\r\n                    console.error(err);\r\n                  });\r\n\r\n                //RANKINGS\r\n                fetch(\r\n                  \"https://api.codechef.com/rankings/\" +\r\n                    this.state.val +\r\n                    \"?fields=&country=&institution=&institutionType=&offset=&limit=&sortBy=&sortOrder=\",\r\n                  {\r\n                    headers: {\r\n                      Authorization:\r\n                        \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n                    },\r\n                    method: \"GET\",\r\n                  }\r\n                )\r\n                  .then((res) => {\r\n                    return res.json();\r\n                  })\r\n                  .then((res) => {\r\n                    // console.log(res);\r\n                    response = res.result;\r\n                    var parsedjson = JSON.parse(JSON.stringify(response));\r\n                    // alert(parsedjson);\r\n                    // console.log(\"HEYEGYGEYGBCY\");\r\n                    // console.log(parsedjson);\r\n\r\n                    var lst = [];\r\n                    for (let x of parsedjson[\"data\"][\"content\"]) {\r\n                      //   let resp;\r\n                      let a = {\r\n                        prank: x[\"rank\"],\r\n                        pusername: x[\"username\"],\r\n                        score: x[\"totalScore\"],\r\n                      };\r\n\r\n                      lst.push(a);\r\n                    }\r\n\r\n                    this.setState({\r\n                      rankings: lst,\r\n                      done: true,\r\n                    });\r\n                  })\r\n                  .catch((err) => {\r\n                    console.error(err);\r\n                  });\r\n                //Submissions\r\n\r\n                fetch(\r\n                  \"https://api.codechef.com/submissions/?result=&year=&username=&language=&problemCode=&contestCode=\" +\r\n                    this.state.val +\r\n                    \"&fields=\",\r\n                  {\r\n                    headers: {\r\n                      Authorization:\r\n                        \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n                    },\r\n                    method: \"GET\",\r\n                  }\r\n                )\r\n                  .then((res) => {\r\n                    return res.json();\r\n                  })\r\n                  .then((res) => {\r\n                    // console.log(res);\r\n                    response = res.result;\r\n                    var parsedjson = JSON.parse(JSON.stringify(response));\r\n\r\n                    // console.log(\"submissions\");\r\n                    // console.log(parsedjson);\r\n\r\n                    var lst = [];\r\n                    for (let x of parsedjson[\"data\"][\"content\"]) {\r\n                      //   let resp;\r\n                      let a = {\r\n                        problemcode: x[\"problemCode\"],\r\n                        pusername: x[\"username\"],\r\n                        result: x[\"result\"],\r\n                        language: x[\"language\"],\r\n                      };\r\n\r\n                      lst.push(a);\r\n                    }\r\n\r\n                    this.setState({\r\n                      submissions: lst,\r\n                      done: true,\r\n                    });\r\n                  })\r\n                  .catch((err) => {\r\n                    console.error(err);\r\n                  });\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.error(err);\r\n            });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if(localStorage.getItem('ref_token') === null ){\r\n          window.location.href = URL.default.url;\r\n        }else{\r\n          fetch( URL.default.url +`?ref_token=${localStorage.getItem('ref_token')}`,\r\n          {headers:{\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n            'Accept': 'application/json'\r\n          },\r\n            method: 'GET'\r\n          }) .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(res=>{\r\n                var tk = res.access_token;\r\n                var rtk = res.refresh_token;\r\n                localStorage.setItem('aut_token', tk);\r\n                localStorage.setItem('ref_token', rtk);\r\n                this.getContest();\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      state: {\r\n        val,\r\n        problems,\r\n        done,\r\n        code,\r\n        name,\r\n        st,\r\n        en,\r\n        banner,\r\n        problemlist,\r\n        announcements,\r\n        rankings,\r\n        submissions,\r\n        ended,\r\n        d,\r\n      },\r\n    } = this;\r\n    return (\r\n      <div className=\"contestbackground\">\r\n        {this.state.done === true && (\r\n          <div>\r\n            <nav class=\"contestnav\">\r\n              <ul>\r\n                <li>\r\n                <img className=\"contestlogo\" src={CodEngine} alt=\"logo\" />\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n\r\n            <div className=\"row\">\r\n              <h1 className=\"contesthead\">\r\n                {\" \"}\r\n                {this.state.name} - ({this.state.code}){\" \"}\r\n              </h1>\r\n              <div className=\"timecontest\">\r\n                {ended === \"begin\" && (\r\n                  <div>\r\n                    <p style={{ textAlign: \"center\", fontSize: \"25px\" }}>\r\n                      Contest Starts In:\r\n                    </p>\r\n                    <hr\r\n                      style={{\r\n                        borderTop: \"2px solid black\",\r\n                        margin: \"0px 20% 0px 20%\",\r\n                      }}\r\n                    />\r\n                    <ul className=\"timer\">\r\n                      <li>\r\n                        <span>{this.state.d}</span>\r\n                      </li>\r\n                      <li>\r\n                        <span>{this.state.h}</span>\r\n                      </li>\r\n                      <li>\r\n                        <span>{this.state.m}</span>\r\n                      </li>\r\n                      <li>\r\n                        <span>{this.state.s}</span>\r\n                      </li>\r\n                    </ul>\r\n                    <ul className=\"timerhead\">\r\n                      <li id=\"clock-hrs-days\">Days</li>\r\n                      <li id=\"clock-hrs-left\">Hrs</li>\r\n                      <li id=\"clock-min-left\">Min</li>\r\n                      <li id=\"clock-sec-left\">Sec</li>\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n                {ended === \"run\" && (\r\n                  <div>\r\n                    <p style={{ textAlign: \"center\", fontSize: \"25px\" }}>\r\n                      Contest Ends In:\r\n                    </p>\r\n                    <hr\r\n                      style={{\r\n                        borderTop: \"2px solid black\",\r\n                        margin: \"0px 20% 0px 20%\",\r\n                      }}\r\n                    />\r\n                    <ul className=\"timer\">\r\n                      <li>\r\n                        <span>{this.state.d}</span>\r\n                      </li>\r\n                      <li>\r\n                        <span>{this.state.h}</span>\r\n                      </li>\r\n                      <li>\r\n                        <span>{this.state.m}</span>\r\n                      </li>\r\n                      <li>\r\n                        <span>{this.state.s}</span>\r\n                      </li>\r\n                    </ul>\r\n                    <ul className=\"timerhead\">\r\n                      <li id=\"clock-hrs-days\">Days</li>\r\n                      <li id=\"clock-hrs-left\">Hrs</li>\r\n                      <li id=\"clock-min-left\">Min</li>\r\n                      <li id=\"clock-sec-left\">Sec</li>\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n                {ended === \"ended\" && (\r\n                  <div>\r\n                    <p style={{ textAlign: \"center\", fontSize: \"25px\" }}>\r\n                      Contest Ended\r\n                    </p>\r\n                    <hr\r\n                      style={{\r\n                        borderTop: \"2px solid black\",\r\n                        margin: \"0px 20% 0px 20%\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"leftcolumn\">\r\n                <div style={{ margin: \"0px 5% 10% 0px\" }}>\r\n                  <img className=\"contestimage\" src={banner} alt=\"logo\" />\r\n                </div>\r\n                <React.Fragment>\r\n                  <table\r\n                    className=\"problemtable\"\r\n                    style={{\r\n                      backgroundColor: \"rgb(214, 209, 209)\",\r\n                      boxShadow: \"0 4px 6px -1px rgba(0,0,0,.8)\",\r\n                      border: \"1px solid rgb(197, 196, 196)\",\r\n                    }}\r\n                  >\r\n                    <tbody>\r\n                      <tr>\r\n                        <th>Problem</th>\r\n                        <th>Submissions</th>\r\n                        <th>Accuracy</th>\r\n                      </tr>\r\n                      {problemlist.map((prob, i) => (\r\n                        <tr key={i}>\r\n                          <td>\r\n                            <Link\r\n                              className=\"lst\"\r\n                              to={\"/problem/\" + prob.pcode + \"/contest/\" + code}\r\n                            >\r\n                              {prob.pcode}\r\n                            </Link>\r\n                          </td>\r\n                          <td>{prob.ssub}</td>\r\n                          <td>{prob.acc.toPrecision(3)}</td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </React.Fragment>\r\n              </div>\r\n\r\n              <div className=\"rightcolumn\">\r\n                <div>\r\n                  <h4 className=\"ranklist\">Ranking</h4>\r\n                  <div className=\"rank\">\r\n                    <React.Fragment>\r\n                      <table className=\"problemtable\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <th>Rank</th>\r\n                            <th>Username</th>\r\n                            <th>Score</th>\r\n                          </tr>\r\n                        </tbody>\r\n                        {rankings.map((prob, i) => (\r\n                          <tr key={i}>\r\n                            <td>{prob.prank}</td>\r\n                            <td>{prob.pusername}</td>\r\n                            <td>{prob.score}</td>\r\n                          </tr>\r\n                        ))}\r\n                      </table>\r\n                    </React.Fragment>\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <h4 className=\"ranklist\">Recent activity</h4>\r\n                  <div className=\"rank\">\r\n                    <React.Fragment>\r\n                      <table className=\"problemtable\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <th>Username</th>\r\n                            <th>Problem</th>\r\n                            <th>Result</th>\r\n                            <th>Lang</th>\r\n                          </tr>\r\n                        </tbody>\r\n                        {submissions.map((prob, i) => (\r\n                          <tr key={i}>\r\n                            <td>{prob.pusername}</td>\r\n                            <td>\r\n                              <Link\r\n                                to={\r\n                                  \"/problem/\" +\r\n                                  prob.problemcode +\r\n                                  \"/contest/\" +\r\n                                  code\r\n                                }\r\n                              >\r\n                                {\" \"}\r\n                                {prob.problemcode}\r\n                              </Link>\r\n                            </td>\r\n                            <td>{prob.result}</td>\r\n                            <td>{prob.language.substring(0, 3)}</td>\r\n                          </tr>\r\n                        ))}\r\n                      </table>\r\n                    </React.Fragment>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <footer className=\"foot\">@CodEngine</footer>\r\n          </div>\r\n        )}\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Contest);\r\n","import React, { Component } from \"react\";\r\nimport \"./FinalSearch.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\nimport Contest from \"../contest/Contest\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CodEngine from \"./Codengine_white-cropped.png\";\r\nimport * as URL from '../config.js';\r\nclass FinalSearch extends Component {\r\n  idMap = {};\r\n  items = [];\r\n  CC = \"1\";\r\n  constructor(props) {\r\n    super(props);\r\n    // console.log('token fetch')\r\n    // console.log(localStorage.getItem('aut_token'));\r\n    // while(localStorage.getItem('aut_token') === null){\r\n\r\n    // console.log('token get')\r\n    // }\r\n    this.yoyo();\r\n    var str = window.location.href;\r\n    try {\r\n      // console.log(\"hey\");\r\n      str = window.location.href.split(\"=\")[1].split(\"&\")[0];\r\n    } catch {\r\n      // console.log(\"Catch\");\r\n      window.location.href = URL.default.url;\r\n    }\r\n  \r\n    fetch(URL.default.url+ `?code=${str}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        Accept: \"application/json\",\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        var tk = res.access_token;\r\n        var rtk = res.refresh_token;\r\n        localStorage.setItem(\"aut_token\", tk);\r\n        localStorage.setItem(\"ref_token\", rtk);\r\n\r\n        let response;\r\n    fetch(\r\n      \"https://api.codechef.com/contests?fields=&status=&offset=&limit=&sortBy=&sortOrder\",\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n        },\r\n        method: \"GET\",\r\n      }\r\n    )\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then ((res) => {\r\n        // console.log(res);\r\n        response = res.result;\r\n        var parsedjson = JSON.parse(JSON.stringify(response));\r\n        // alert(parsedjson);\r\n        // console.log(parsedjson);\r\n        var getCode = parsedjson[\"data\"][\"content\"][\"contestList\"].map(\r\n          (val) => val.code\r\n        );\r\n        var getName = parsedjson[\"data\"][\"content\"][\"contestList\"].map(\r\n          (val) => val.name\r\n        );\r\n        var getNameCode = getCode.concat(getName);\r\n        this.items = getNameCode;\r\n        var getNameCode = getCode.concat(getName);\r\n        // console.log(this.items);\r\n        for (let x of parsedjson[\"data\"][\"content\"][\"contestList\"]) {\r\n          this.idMap[x.name] = x.code;\r\n          this.idMap[x.code] = x.code;\r\n        }\r\n        // console.log(this.idMap);\r\n        this.setState({ mapping: this.idMap });\r\n        var getStartDate = parsedjson[\"data\"][\"content\"][\"contestList\"].map(\r\n          (val) => val.startDate\r\n        );\r\n        var getEndDate = parsedjson[\"data\"][\"content\"][\"contestList\"].map(\r\n          (val) => val.endDate\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        if (localStorage.getItem(\"ref_token\") === null) {\r\n          window.location.href = URL.default.url;\r\n        } else {\r\n          fetch(\r\n            URL.default.url+`?ref_token=${localStorage.getItem(\r\n              \"ref_token\"\r\n            )}`,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                Accept: \"application/json\",\r\n              },\r\n              method: \"GET\",\r\n            }\r\n          )\r\n            .then((res) => {\r\n              return res.json();\r\n            })\r\n            .then((res) => {\r\n              var tk = res.access_token;\r\n              var rtk = res.refresh_token;\r\n              localStorage.setItem(\"aut_token\", tk);\r\n              localStorage.setItem(\"ref_token\", rtk);\r\n              let response;\r\n              fetch(\r\n                \"https://api.codechef.com/contests?fields=&status=&offset=&limit=&sortBy=&sortOrder\",\r\n                {\r\n                  headers: {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                    Authorization:\r\n                      \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n                  },\r\n                  method: \"GET\",\r\n                }\r\n              )\r\n                .then((res) => {\r\n                  return res.json();\r\n                })\r\n                .then((res) => {\r\n                  // console.log(res);\r\n                  response = res.result;\r\n                  var parsedjson = JSON.parse(JSON.stringify(response));\r\n                  // alert(parsedjson);\r\n                  // console.log(parsedjson);\r\n                  var getCode = parsedjson[\"data\"][\"content\"][\r\n                    \"contestList\"\r\n                  ].map((val) => val.code);\r\n                  var getName = parsedjson[\"data\"][\"content\"][\r\n                    \"contestList\"\r\n                  ].map((val) => val.name);\r\n                  var getNameCode = getCode.concat(getName);\r\n                  this.items = getNameCode;\r\n                  var getNameCode = getCode.concat(getName);\r\n         \r\n                  for (let x of parsedjson[\"data\"][\"content\"][\"contestList\"]) {\r\n                    this.idMap[x.name] = x.code;\r\n                    this.idMap[x.code] = x.code;\r\n                  }\r\n            \r\n                  this.setState({ mapping: this.idMap });\r\n                  var getStartDate = parsedjson[\"data\"][\"content\"][\r\n                    \"contestList\"\r\n                  ].map((val) => val.startDate);\r\n                  var getEndDate = parsedjson[\"data\"][\"content\"][\r\n                    \"contestList\"\r\n                  ].map((val) => val.endDate);\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                });\r\n            });\r\n        }\r\n      }); \r\n\r\n\r\n\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n      });\r\n\r\n\r\n\r\n    // console.log(this.items);\r\n    this.state = {\r\n      suggestions: [],\r\n      text: \"\",\r\n      code: \"\",\r\n      mapping: {},\r\n      FC: \"\",\r\n    };\r\n  }\r\n\r\n  yoyo() {\r\n    // console.log(\"yoyo worked!!!!\");\r\n  }\r\n\r\n  onTextChanged = (e) => {\r\n\r\n    const value = e.target.value;\r\n    let suggestions = [];\r\n    if (value.length > 0) {\r\n      const regex = new RegExp(`^${value}`, `i`);\r\n      suggestions = this.items.sort().filter((v) => regex.test(v));\r\n    }\r\n    this.setState(() => ({ suggestions, text: value }));\r\n\r\n    // if(value.length === 0){\r\n    //   this.setState(()=>({\r\n    //     suggestions:[],\r\n    //   }));\r\n    // }else{\r\n    //   const regex = new RegExp(`^${value}`,`i`);\r\n    //   const suggestions = this.items.sort().filter(v=>regex.test(v));\r\n    //   this.setState(()=>({suggestions, text:value}))  ;\r\n    // }\r\n  };\r\n\r\n  renderSuggestions() {\r\n    const { suggestions } = this.state;\r\n    if (suggestions.length === 0) {\r\n      return null;\r\n    }\r\n    var x = this.CC;\r\n    const newTo = {\r\n      pathname: \"/contest/\" + x,\r\n      param1: this.CC,\r\n    };\r\n    return (\r\n      <ul>\r\n        {suggestions.map((item) => (\r\n         <Link to={\"/contest/\" + this.idMap[item]}> <li onClick={() => this.suggestionSelected(item)}>  {item} </li> </Link>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n  suggestionSelected(value) {\r\n    this.setState(() => ({\r\n      text: value,\r\n      suggestions: [],\r\n    }));\r\n\r\n    // window.location.href = \"http://localhost:3000/contest/\"+value\r\n  }\r\n  componentDidMount() {\r\n    const values = queryString.parse(this.props.location.search);\r\n    // alert(values.code) // CODE\r\n    let Code = JSON.stringify(values.code);\r\n    Code = Code.substring(1, Code.length - 1);\r\n    // alert(Code);\r\n\r\n    // console.log(Code);\r\n    this.setState({ code: Code });\r\n  }\r\n\r\n\r\n  setText(value) {\r\n    // console.log(value);\r\n\r\n    // console.log(this.idMap[value.text]);\r\n    var v = this.idMap[value.text];\r\n    this.state.FC = v;\r\n    this.CC = this.state.FC;\r\n    // console.log(\"HEY\");\r\n    // console.log(this.CC);\r\n  }\r\n  isDisabled() {\r\n    //logic to define if button should be disabled or not\r\n    //return boolean true or false based on that\r\n    // return this.state.FC < 0;\r\n    return this.state.FC;\r\n  }\r\n  render() {\r\n    const { text } = this.state;\r\n    return (\r\n      <div className=\"finalsearchback\">\r\n        <nav className=\"contestnav\">\r\n          <ul>\r\n            <li>\r\n            <img className=\"searchimage\" src={CodEngine} alt=\"logo\" />\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"flexbox\">\r\n          <div className=\"search\">\r\n            <h1>Search Contest</h1>\r\n            <h3>Click on search icon, to search for the contest</h3>\r\n            <div className=\"inputsearch\">\r\n              <input\r\n                value={text}\r\n                onChange={this.onTextChanged}\r\n                type=\"text\"\r\n                placeholder=\"       Search . . .\"\r\n                required\r\n              />\r\n              <div className=\"contestlist\">\r\n                {this.renderSuggestions()}\r\n                {this.setText({ text })}\r\n              </div>\r\n              {/* <div className=\"container-click\">\r\n                {this.isDisabled() ? (\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"click-button\"\r\n                    disabled={this.isDisabled()}\r\n                  >\r\n                    <Link to={\"/contest/\" + this.state.FC} className=\"click\">\r\n                      Search\r\n                    </Link>\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"click-button\"\r\n                    disabled={this.isDisabled()}\r\n                  >\r\n                    <Link className=\"click\">Search</Link>\r\n                  </button>\r\n                )}\r\n              </div> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(FinalSearch);\r\n","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport AceEditor from \"react-ace\";\r\nimport brace from \"brace\";\r\nimport \"./CodeEditor.css\";\r\nimport \"brace/mode/javascript\";\r\nimport \"brace/mode/c_cpp\";\r\nimport \"brace/mode/java\";\r\nimport \"brace/mode/python\";\r\nimport \"brace/mode/golang\";\r\nimport \"brace/theme/monokai\";\r\nimport \"brace/theme/tomorrow\";\r\nimport \"brace/theme/github\";\r\nimport CodEngine from \"./Codengine_white-cropped.png\";\r\nimport Parser from \"html-react-parser\";\r\n\r\nclass CodeEditor extends Component {\r\n  code4 = \"\";\r\n  constructor(props) {\r\n    super(props);\r\n    // this.onChange = this.onChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n\r\n    // this.onChange = this.onChange.bind(this);\r\n    this.state = {\r\n      code: ``,\r\n      codd: \" // Write your code here ... \",\r\n      lang: \"c_cpp\",\r\n      theme: \"monokai\",\r\n      output: {},\r\n      stat: false,\r\n      customTC: \"\",\r\n      statement: \"\",\r\n      running: false,\r\n      sub: false,\r\n      clicked: false,\r\n    };\r\n\r\n    this.getProblems();\r\n  }\r\n  getProblems() {\r\n    var str = window.location.href.split(\"/\");\r\n    while (localStorage.getItem(\"aut_token\") === null) {\r\n      // console.log(\"token get\");\r\n    }\r\n    fetch(\r\n      \"https://api.codechef.com/contests/\" + str[6] + \"/problems/\" + str[4],\r\n      {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n        },\r\n        method: \"GET\",\r\n      }\r\n    )\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        let response = res.result;\r\n        // console.log(res);\r\n        // console.log(response);\r\n\r\n        var parsedjson = JSON.parse(JSON.stringify(response));\r\n        var parsedjson1 = parsedjson[\"data\"][\"content\"];\r\n        // console.log(parsedjson1);\r\n        this.setState({\r\n          pname: parsedjson1[\"problemName\"],\r\n          pcode: parsedjson1[\"problemCode\"],\r\n          statement: parsedjson1[\"body\"],\r\n          sizelt: parsedjson1[\"sourceSizeLimit\"],\r\n          timelt: parsedjson1[\"maxTimeLimit\"],\r\n          auth: parsedjson1[\"author\"],\r\n          sucsub: parsedjson1[\"successfulSubmissions\"],\r\n          totsub: parsedjson1[\"totalSubmissions\"],\r\n          lag: parsedjson1[\"languagesSupported\"],\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (localStorage.getItem(\"ref_token\") === null) {\r\n          window.location.href = \"http://localhost:8000/index.php\";\r\n        } else {\r\n          fetch(\r\n            `http://localhost:8000/index.php/?ref_token=${localStorage.getItem(\r\n              \"ref_token\"\r\n            )}`,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                Accept: \"application/json\",\r\n              },\r\n              method: \"GET\",\r\n            }\r\n          )\r\n            .then((res) => {\r\n              return res.json();\r\n            })\r\n            .then((res) => {\r\n              var tk = res.access_token;\r\n              var rtk = res.refresh_token;\r\n              localStorage.setItem(\"aut_token\", tk);\r\n              localStorage.setItem(\"ref_token\", rtk);\r\n              this.getProblems();\r\n            });\r\n        }\r\n        // alert(\"SESSION EXPIRED! YOU HAVE TO LOGIN AGAIN !\");\r\n        // window.location.href = 'http://localhost:8000/index.php'\r\n      });\r\n  }\r\n\r\n  sets(s) {\r\n    this.setState({ codd: s });\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.codd !== nextState.codd) {\r\n      return false;\r\n    } else return true;\r\n  }\r\n  handleClick() {\r\n      // console.log('language...')\r\n    //  console.log(this.state.lang)\r\n    if (this.state.lang === \"c_cpp\") {\r\n      this.setState({ lang: \"C++14\" });\r\n    }\r\n    else if (this.state.lang === \"python\")\r\n    {\r\n      this.setState({ lang: \"PYTH 3.6\" });\r\n    } \r\n    else if (this.state.lang === \"java\") \r\n    {\r\n      this.setState({ lang: \"JAVA\" });\r\n    } \r\n    else if (this.state.lang === \"javascript\")\r\n    {\r\n      this.setState({ lang: \"JS\" });\r\n    } \r\n    else if (this.state.lang === \"goloang\") \r\n    {\r\n      this.setState({ lang: \"GO\" });\r\n    }\r\n\r\n    var payload = {\r\n      sourceCode: this.state.codd,\r\n      language: this.state.lang,\r\n      input: this.state.customTC,\r\n    };\r\n    this.setState({ running: true, sub: false });\r\n    var data = new FormData();\r\n    data.append(\"json\", JSON.stringify(payload));\r\n    let response;\r\n    if (this.state.running == true)\r\n      fetch(\"https://api.codechef.com/ide/run\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n        },\r\n        method: \"POST\",\r\n        body: JSON.stringify(payload),\r\n        // body: payload\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          // console.log(JSON.stringify(data));\r\n          response = data.result;\r\n          var parsedjson = JSON.parse(JSON.stringify(response));\r\n          // console.log(parsedjson[\"data\"].link);\r\n          var link = parsedjson[\"data\"].link;\r\n          // console.log(link);\r\n\r\n          this.setState({ link: link });\r\n          this.setopts();\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n  }\r\n  setopts() {\r\n    if (this.state.running === true)\r\n      fetch(\"https://api.codechef.com/ide/status?link=\" + this.state.link, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"aut_token\"),\r\n        },\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((res) => {\r\n          // console.log(res);\r\n          var st = res.status;\r\n          // console.log(st);\r\n\r\n          let response = res.result;\r\n          var parsedjson = JSON.parse(JSON.stringify(response));\r\n          // alert(parsedjson);\r\n          // console.log(\"submissions\");\r\n          // console.log(parsedjson);\r\n\r\n          let a = {\r\n            status: st,\r\n            date: parsedjson[\"data\"].date,\r\n            op: parsedjson[\"data\"].output,\r\n            mem: parsedjson[\"data\"].memory,\r\n          };\r\n          // console.log(a);\r\n          this.setState({\r\n            output: a,\r\n            stat: true,\r\n          });\r\n          if (parsedjson[\"data\"].memory == 0) {\r\n            setTimeout(() => {\r\n              this.setopts();\r\n            }, 20000);\r\n          }\r\n          // console.log(this.state.output);\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n  }\r\n\r\n  onChange = (newValue) => {\r\n    // newValue.preventDefault();\r\n    // console.log(\"change\", newValue);\r\n    // this.sets(newValue)\r\n    // this.code4 = newValue;\r\n    this.setState({\r\n      codd: newValue,\r\n    });\r\n    // console.log(this.state.codd);\r\n  };\r\n  handleCustomTC = (e) => {\r\n    this.setState({ customTC: e.target.value });\r\n    // console.log(this.state.customTC);\r\n  };\r\n  runCode() {\r\n    // console.log(\"BUTTON RUN\");\r\n  }\r\n  submit = () => {\r\n    this.setState({ sub: true, running: false });\r\n  };\r\n  handleChange1 = (e) => {\r\n    this.setState({ lang: e.target.value });\r\n  };\r\n  handleChange2 = (e) => {\r\n    this.setState({ theme: e.target.value });\r\n  };\r\n  myFunction = () => {\r\n    var bl = this.state.clicked;\r\n    if (bl === false) bl = true;\r\n    else bl = false;\r\n    this.setState({ clicked: bl });\r\n  };\r\n  render() {\r\n    const {\r\n      state: {\r\n        codd,\r\n        output,\r\n        stat,\r\n        pcode,\r\n        pname,\r\n        statement,\r\n        sizelt,\r\n        timelt,\r\n        auth,\r\n        sucsub,\r\n        totsub,\r\n        running,\r\n        sub,\r\n        lang,\r\n        theme,\r\n        clicked,\r\n      },\r\n    } = this;\r\n    return (\r\n      <div>\r\n        <nav class=\"CodeeditorNav\">\r\n              <ul>\r\n                <li>\r\n                <img className=\"contestlogo\" src={CodEngine} alt=\"logo\" />\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n        <div className=\"card\">\r\n          <div className=\"qhead\">\r\n            <h1>\r\n              {pname} ({pcode})\r\n            </h1>\r\n            <p>\r\n              Successful Submissions : {sucsub} <br></br>Total Submissions :{\" \"}\r\n              {totsub}\r\n            </p>\r\n          </div>\r\n          <p\r\n            className=\"question\"\r\n            style={{\r\n              textAlign: \"justify\",\r\n              textJustify: \"inter-word\",\r\n              margin: \"0px\",\r\n            }}\r\n          >\r\n            \r\n            {Parser(statement)}\r\n          </p>\r\n          <div className=\"authdiv\">\r\n            <p>Author : {auth}</p>\r\n            <p>Maximum Size Limit : {sizelt}</p>\r\n            <p>Maximum Time Limit : {timelt}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"codeeditor\">\r\n          <h2>Problem Code : ({pcode})</h2>\r\n          <select\r\n            className=\"codelang\"\r\n            value={lang}\r\n            onChange={this.handleChange1}\r\n          >\r\n            <option value=\"c_cpp\">C++</option>\r\n            <option value=\"java\">Java</option>\r\n            <option value=\"python\">Python</option>\r\n            <option value=\"javascript\">Javascript</option>\r\n            <option value=\"golang\">Golang</option>\r\n          </select>\r\n          <select\r\n            className=\"codelang\"\r\n            value={theme}\r\n            onChange={this.handleChange2}\r\n          >\r\n            <option value=\"monokai\">Monokai</option>\r\n            <option value=\"tomorrow\">Tomorrow</option>\r\n            <option value=\"github\">Github</option>\r\n          </select>\r\n          <AceEditor\r\n            style={{\r\n              borderRadius: \"25px\",\r\n              width: \"80%\",\r\n              margin: \"20px 10px 10px 10px\",\r\n            }}\r\n            mode={lang}\r\n            theme={theme}\r\n            name=\"editor\"\r\n            value={codd}\r\n            onChange={this.onChange}\r\n            fontSize={19}\r\n            editorProps={{ $blockScrolling: true }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"cinput\">\r\n          <button className=\"button\" onClick={this.handleClick}>\r\n            <span> Run </span>\r\n          </button>\r\n          <button className=\"button2\" onClick={this.submit}>\r\n            {\" \"}\r\n            <span> Submit </span>\r\n          </button>\r\n          <input type=\"checkbox\" onClick={this.myFunction}></input>\r\n          <label className=\"checkinput\">Custom Input</label>\r\n          {clicked === true && (\r\n            <div>\r\n              <textarea\r\n                className=\"customtext\"\r\n                value={this.state.customTC}\r\n                onChange={this.handleCustomTC}\r\n              ></textarea>\r\n            </div>\r\n          )}\r\n          {sub === true && (\r\n            <div className=\"card submitbox\">\r\n              {\" \"}\r\n              <span>&#9989;</span>Submitted\r\n            </div>\r\n          )}\r\n          {output.mem === 0 && running === true && (\r\n            <div\r\n              className=\"card runnbox\"\r\n              style={{ borderRadius: \"25px\", color: \"black\" }}\r\n            >\r\n              <div className=\"lds-roller\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n              </div>\r\n              <p style={{ padding: \"5% 0px 0px 40%\" }}>Running...</p>\r\n            </div>\r\n          )}\r\n          {stat === true && output.mem !== 0 && (\r\n            <div\r\n              className=\"codeoutput\"\r\n              style={{ borderRadius: \"25px\", color: \"black\" }}\r\n            >\r\n              {\" \"}\r\n              <p style={{ fontWeight: \"bold\" }}> Status : {output.status}</p>\r\n              <p style={{ fontWeight: \"bold\" }}> Date : {output.date} </p>\r\n              <p style={{ fontWeight: \"bold\" }}>Memory : {output.mem} </p>{\" \"}\r\n              <hr /> <p style={{ fontWeight: \"bold\" }}> Output : </p>{\" \"}\r\n              {output.op}{\" \"}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <footer className=\"foot\">@CodEngine</footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst data = `function onLoad(editor) {\r\n  // console.log(\"I've loaded!\");\r\n}`;\r\nexport default CodeEditor;\r\n","import React, { Component } from \"react\";\r\nimport Login from \"./login/Login\";\r\nimport Contest from \"./contest/Contest\";\r\nimport FinalSearch from \"./search/FinalSearch\";\r\nimport { BrowserRouter, Route, Switch, withRouter } from \"react-router-dom\";\r\nimport CodeEditor from \"./editor/CodeEditor\";\r\n\r\nclass Codechef extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={Login} />\r\n            <Route path=\"/search\" exact component={FinalSearch} />\r\n            <Route path={\"/contest/:id\"} component={Contest} />\r\n            <Route path={\"/problem\"} component={CodeEditor} />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Codechef;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Codechef from './Codechef';\nimport * as serviceWorker from './serviceWorker';\n// console.log(React.version);\nReactDOM.render(<Codechef />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}